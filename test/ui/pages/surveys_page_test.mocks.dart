// Mocks generated by Mockito 5.1.0 from annotations
// in fordev/test/ui/pages/surveys_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:fordev/ui/pages/pages.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [SurveysPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockSurveysPresenter extends _i1.Mock implements _i2.SurveysPresenter {
  MockSurveysPresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<bool> get isLoadingStream =>
      (super.noSuchMethod(Invocation.getter(#isLoadingStream),
          returnValue: Stream<bool>.empty()) as _i3.Stream<bool>);
  @override
  _i3.Stream<List<_i2.SurveyViewModel>> get surveysStream =>
      (super.noSuchMethod(Invocation.getter(#surveysStream),
              returnValue: Stream<List<_i2.SurveyViewModel>>.empty())
          as _i3.Stream<List<_i2.SurveyViewModel>>);
  @override
  _i3.Stream<String?> get navigateToStream =>
      (super.noSuchMethod(Invocation.getter(#navigateToStream),
          returnValue: Stream<String?>.empty()) as _i3.Stream<String?>);
  @override
  _i3.Stream<bool> get isSessionExpiredStream =>
      (super.noSuchMethod(Invocation.getter(#isSessionExpiredStream),
          returnValue: Stream<bool>.empty()) as _i3.Stream<bool>);
  @override
  void loadData() => super.noSuchMethod(Invocation.method(#loadData, []),
      returnValueForMissingStub: null);
  @override
  void goToSurveyResult({String? surveyId}) => super.noSuchMethod(
      Invocation.method(#goToSurveyResult, [], {#surveyId: surveyId}),
      returnValueForMissingStub: null);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}
